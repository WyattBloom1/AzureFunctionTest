name: Deploy DotNet project to Azure Function App

on:
  [push]

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# 1. Paste the RBAC json into the following secret in your repository:
#   AZURE_RBAC_CREDENTIALS
#
# 2. Change these variables for your configuration:
env:
  AZURE_FUNCTIONAPP_NAME: 'JobTrackingAPI'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '8'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

jobs:
  build-and-deploy:
    runs-on: windows-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Npm'
      shell: pwsh # For Linux, use bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples


# name: Deploy Node.js project to Azure Function App

# on:
#   push:
#     branches: ["master"]

# env:
#   AZURE_FUNCTIONAPP_NAME: 'JobTrackingAPI'   # set this to your function app name on Azure
#   AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
#   NODE_VERSION: '8'                      # set this to the node version to use (e.g. '8.x', '10.x', '12.x')

# # permissions:
# #   id-token: write
# #   contents: read
# jobs:
#   build-and-deploy:
#     runs-on: windows-latest # For Linux, use ubuntu-latest
#     environment: dev
#     steps:
#     - name: 'Checkout GitHub Action'
#       uses: actions/checkout@v4

#     # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
#     # - name: 'Login via Azure CLI'
#     #   uses: azure/login@v1
#     #   with:
#     #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

#     - name: Login to Azure
#       uses: azure/login@v2
#       with:
#         client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_9DA6793132194015AA47CDD29C840946 }}
#         tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_FFCD2CCF61F344DFADD121464D4D17E9 }}
#         subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_85216BCB611F47D7A679F16F92A6782E }}

#     - name: Setup Node ${{ env.NODE_VERSION }} Environment
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ env.NODE_VERSION }}

#     - name: 'Resolve Project Dependencies Using Npm'
#       shell: pwsh # For Linux, use bash
#       run: |
#         pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#         npm install
#         npm run build --if-present
#         npm run test --if-present
#         popd

#     # - name: Login to Azure
#     #   uses: azure/login@v2
#     #   with:
#     #     client-id: ${{ secrets.__clientidsecretname__ }}
#     #     tenant-id: ${{ secrets.__tenantidsecretname__ }}
#     #     subscription-id: ${{ secrets.__subscriptionidsecretname__ }}

#     - name: 'Run Azure Functions Action'
#       uses: Azure/functions-action@v1
#       id: fa
#       with:
#           app-name: 'JobTrackingAPI'
#           slot-name: 'Production'
#           package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          


      # - name: 'Run Azure Functions Action'
      #   uses: Azure/functions-action@v1
      #   id: fa
      #   with:
      #     app-name: 'JobTrackingAPI'
      #     slot-name: 'Production'
      #     package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

# name: Deploy DotNet project to Azure Function App

# on:
#   [push]

# # CONFIGURATION
# # For help, go to https://github.com/Azure/Actions
# #
# # 1. Set up the following secrets in your repository:
# #   AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# #
# # 2. Change these variables for your configuration:
# env:
#   AZURE_FUNCTIONAPP_NAME: 'JobTrackingAPI'   # set this to your function app name on Azure
#   AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
#   DOTNET_VERSION: '8'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

# jobs:
#   build-and-deploy:
#     runs-on: windows-latest
#     environment: dev
#     steps:
#     - name: 'Checkout GitHub Action'
#       uses: actions/checkout@v3

#     - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}

#     - name: 'Resolve Project Dependencies Using Dotnet'
#       shell: pwsh
#       run: |
#         pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#         dotnet build --configuration Release --output ./output
#         popd

#     - name: 'Run Azure Functions Action'
#       uses: Azure/functions-action@v1
#       id: fa
#       with:
#         app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
#         package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
#         publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

# # For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples